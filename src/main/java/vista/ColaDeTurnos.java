/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import controlador.Controlador;
import java.util.ArrayList;

import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.table.DefaultTableModel;
import modelo.Area;
import modelo.CondicionPrioritaria;
import modelo.EstadoTurno;
import modelo.Tramite;
import modelo.Turno;

/**
 *
 * @author julian
 */
public class ColaDeTurnos extends javax.swing.JPanel {
    private Controlador controlador;
    /**
     * Creates new form ColaDeTurnos
     */
    public ColaDeTurnos() {
        initComponents();
    }
        
    public ColaDeTurnos(Controlador crt) {
       this();
       this.controlador=crt;
       this.cargarComboAreas();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        ComboAreas = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla1 = new javax.swing.JTable();
        botonAtenderSiguiente = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        txtHora = new javax.swing.JTextField();
        txtCliente = new javax.swing.JTextField();
        txtTramite = new javax.swing.JTextField();
        txtEstado = new javax.swing.JTextField();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Cola de Turnos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(362, 362, 362)
                .addComponent(jLabel1)
                .addContainerGap(423, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        ComboAreas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ComboAreas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboAreasActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Areas");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Turnos Prioritarios", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        tabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        botonAtenderSiguiente.setText("Atender el siguiente turno");
        botonAtenderSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAtenderSiguienteActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Turnos ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabla2);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 48, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Turno Actual");

        jLabel3.setText("Numero de Turno:");

        jLabel5.setText("Hora de Registro:");

        jLabel6.setText("Tramite:");

        jLabel7.setText("Estado del Turno:");

        jLabel8.setText("Cliente:");

        txtNumero.setEnabled(false);

        txtHora.setEnabled(false);

        txtCliente.setEnabled(false);

        txtTramite.setEnabled(false);

        txtEstado.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ComboAreas, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonAtenderSiguiente)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7))
                                .addGap(50, 50, 50)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNumero)
                                    .addComponent(txtHora)
                                    .addComponent(txtCliente)
                                    .addComponent(txtTramite)
                                    .addComponent(txtEstado, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))))))
                .addContainerGap(107, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 57, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(390, 390, 390))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAtenderSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboAreas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtTramite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ComboAreasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboAreasActionPerformed
        EstadoTurno et = null;
        String nombreArea = (String) ComboAreas.getSelectedItem();
        Area are = this.controlador.buscarArea(nombreArea);
//        JOptionPane.showMessageDialog(this, "El id del area  actual es: " + are.getId_area(), "INFORMATION", INFORMATION_MESSAGE);
      
        List<Turno> turnosPrioritarios = are.getTurnosPriori();
        List<Turno> turnos = are.getTurnos();
        this.cargarColasDeTurnos(are);
//        Turno turnoActual= this.atenderSiguienteTurno(turnosPrioritarios);
//        if (turnoActual == null){
//            turnoActual= this.atenderSiguienteTurno(turnos);
//        }
//        if (turnoActual!= null){
//            et = this.controlador.buscarEstadoTurno("atendiendo");
//            turnoActual.setEstadoTurno(et);
//            this.cargarTurnoActual(turnoActual);
//        }else{
//            JOptionPane.showMessageDialog(this, "No hay turnos para ser atendidos en esta Area", "Error", ERROR_MESSAGE);
//        }
            
    }//GEN-LAST:event_ComboAreasActionPerformed

    private void botonAtenderSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAtenderSiguienteActionPerformed
        String nombreArea = (String) ComboAreas.getSelectedItem();
        Area are = this.controlador.buscarArea(nombreArea);
        List<Turno> turnosPrioritarios = are.getTurnosPriori();
        List<Turno> turnos = are.getTurnos();
        Turno turnoActual=null;
        Turno turnoAtender = null;
        EstadoTurno et = null;
        EstadoTurno estadoFin = null;
        
        int id;
        int ban=0;
        
//        if (!turnosPrioritarios.isEmpty()){
           
        
        turnoAtender = this.atenderSiguienteTurno(turnosPrioritarios);
//        if (txtNumero.getText().isEmpty()){
//            ban=1;   
//            JOptionPane.showMessageDialog(this, "El campo Numero de turno actual está vacio", "Error", ERROR_MESSAGE);
//         
//        }
        
        if (ban==0){
                  //preguntar si la lista de turnos prioritarios está vacía
    //        et=this.controlador.buscarEstadoTurno("para atencion");
    //        turnosPrioritarios.get(0).setEstadoTurno(et);
    //        this.controlador.actualizarTurno( turnosPrioritarios.get(1));
            //turnosPrioritarios.get(1).setEstadoTurno();
    //        }else{
    
    
    
    // Finalizamos el turno que se esta atendiendo actualmente para poder atender al siguiente turno
                if(!txtNumero.getText().isEmpty()){
                    id= Integer.parseInt(txtNumero.getText());
                    turnoActual= this.controlador.buscarTurno(id);
                    estadoFin = this.controlador.buscarEstadoTurno("finalizado");
                    turnoActual.setEstadoTurno(estadoFin);
                    this.controlador.actualizarTurno(turnoActual);
                    this.cargarColasDeTurnos(are);
                }
                
               
                if(turnoAtender == null){
                    JOptionPane.showMessageDialog(this, "No hay mas turnos prioritarios por ser atendidos "  , "INFORMATION", INFORMATION_MESSAGE);
                    turnoAtender = this.atenderSiguienteTurno(turnos);

                    //preguntar si la lista de turnos prioritarios está vacía

    //                et=this.controlador.buscarEstadoTurno("para atencion");
    //                turnos.get(1).setEstadoTurno(et);
    //                this.controlador.actualizarTurno( turnos.get(1));
                }


    //        }
            if (turnoAtender!=null){
                 id= turnoAtender.getId_turno();
//                JOptionPane.showMessageDialog(this, "El id del turno77 actual es: " + id, "INFORMATION", INFORMATION_MESSAGE);
                 this.cargarTurnoActual(turnoAtender);
                 id= turnoAtender.getEstadoTurno().getId_Estado();
//                 JOptionPane.showMessageDialog(this, "El id del estadoturno sin actualizar del tuno actual es: " + id, "INFORMATION", INFORMATION_MESSAGE);

                 et = this.controlador.buscarEstadoTurno("atendiendo");

                 turnoAtender.setEstadoTurno(et);
                 this.cargarTurnoActual(turnoAtender);
                this.controlador.actualizarTurno(turnoAtender);
                 id= et.getId_Estado();
//                JOptionPane.showMessageDialog(this, "El id del estadoturno actualizado del tuno actual es: " + id, "INFORMATION", INFORMATION_MESSAGE);

                this.cargarColasDeTurnos(are);
            }else{
                 JOptionPane.showMessageDialog(this, "No hay mas turnos para ser atendidos en esta Area", "Error", ERROR_MESSAGE);

            }
            
        }
                 
      
       
        
        
    }//GEN-LAST:event_botonAtenderSiguienteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboAreas;
    private javax.swing.JButton botonAtenderSiguiente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla1;
    private javax.swing.JTable tabla2;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtTramite;
    // End of variables declaration//GEN-END:variables

    public void cargarComboAreas(){
        List <Area> listaAreas = controlador.ListarAreas();
        for(int i = 0; i < listaAreas.size() ; i++ ){
             ComboAreas.addItem(listaAreas.get(i).getNombreArea());
        }
    }
    
    public void cargarTurnoActual(Turno turnoAtender){
     
        Date hora = null;
        String horareg = ""; 
        String nCliente = "";
        int h= 0;
        int min = 0;
        int seg = 0; 
        txtNumero.setText(String.valueOf(turnoAtender.getId_turno()));
        hora= turnoAtender.getHoraRegistro(); 
        h= hora.getHours();
        min= hora.getMinutes();
        seg = hora.getSeconds();
        horareg = h+ ":"+min+":"+seg;
        txtHora.setText(horareg);
        nCliente = turnoAtender.getCliente().getNombre() + " " + turnoAtender.getCliente().getApellido();
        txtCliente.setText(nCliente);
        txtTramite.setText(turnoAtender.getTramite().getNombreTramite());
        txtEstado.setText(turnoAtender.getEstadoTurno().getNombre());                          
    
    }
    
    
    
    public void cargarColasDeTurnos (Area are){
        List <Turno> turnos = are.getTurnos();
        List <Turno> turnosPriori = are.getTurnosPriori();
        String ncliente= "";
        
         /* cargo la tabla de turnos prioritarios
        
        */
         
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("NroTurno");//0
        model.addColumn("horaRegistro");//1
        model.addColumn("Tramite");//2
        model.addColumn("Cliente");//3
        model.addColumn("EstadoTurno");//4
        model.addColumn("CondicionPrioritaria");//5
        Date hora = null;
        String horareg = null;
        Tramite tra = new Tramite();
        EstadoTurno et = new EstadoTurno();
        
        CondicionPrioritaria condicion = null;
        String con = null;
        int h= 0;
        int min = 0;
        int seg = 0;
        model.setRowCount(turnosPriori.size());
        for(int i = 0; i < turnosPriori.size(); i++){
            
            model.setValueAt(turnosPriori.get(i).getId_turno(), i, 0);
            hora= turnos.get(i).getHoraRegistro(); 
          
            h= hora.getHours();
            min= hora.getMinutes();
            seg = hora.getSeconds();
            horareg = h+ ":"+min+":"+seg;
            model.setValueAt(horareg, i, 1);
            tra=turnosPriori.get(i).getTramite();
            model.setValueAt(tra.getNombreTramite(), i, 2);
            ncliente= turnosPriori.get(i).getCliente().getNombre() + " " + turnosPriori.get(i).getCliente().getApellido();
            model.setValueAt(ncliente, i, 3);

            et=turnosPriori.get(i).getEstadoTurno();

            model.setValueAt(et.getNombre(), i, 4);
            condicion = turnosPriori.get(i).getCondicionPrioritaria();

            model.setValueAt(condicion.getMotivo(), i, 5);
        }
        this.tabla1.setModel(model);
       // JOptionPane.showMessageDialog(this, "Se creó la tabla turnos prioritarios " , "INFORMATION", INFORMATION_MESSAGE);
        /* cargo la tabla de turnos normales
        
        */
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("NroTurno");//0
        modelo.addColumn("horaRegistro");//1
        modelo.addColumn("Cliente"); //2
        modelo.addColumn("Tramite");//3
        modelo.addColumn("EstadoTurno");//4
        
        hora = null;
        horareg = null;
        tra= null;
        et = null;
        modelo.setRowCount(turnos.size());
        h = 0;
        min = 0;
        seg = 0;
        ncliente="";
        
        for(int i = 0; i < turnos.size(); i++){
            
            modelo.setValueAt(turnos.get(i).getId_turno(), i, 0);
            hora= turnos.get(i).getHoraRegistro(); 
            h= hora.getHours();
            min= hora.getMinutes();
            
            seg = hora.getSeconds();
            horareg = h+ ":"+min+":"+seg;
            modelo.setValueAt(horareg, i, 1);
            ncliente = ncliente= turnos.get(i).getCliente().getNombre() + " " + turnos.get(i).getCliente().getApellido();
            modelo.setValueAt(ncliente, i, 2);
            tra=turnos.get(i).getTramite();
            modelo.setValueAt(tra.getNombreTramite(), i, 3);
            et=turnos.get(i).getEstadoTurno();
            modelo.setValueAt(et.getNombre(), i, 4);
            
                      
        }
        this.tabla2.setModel(modelo);
      //  JOptionPane.showMessageDialog(this, "Se creó la tabla turnos normales " , "INFORMATION", INFORMATION_MESSAGE);
    }
    
 public Turno atenderSiguienteTurno (List<Turno> turnos){
        Turno turnoActual = null;
        int ban=0;
        EstadoTurno  et = this.controlador.buscarEstadoTurno("para atencion");
        EstadoTurno  estado = this.controlador.buscarEstadoTurno("en espera");
        if (!turnos.isEmpty()){
             for(int i=0; i<turnos.size(); i++){
                if(turnos.get(i).getEstadoTurno().getId_Estado()== et.getId_Estado()){
                    turnoActual= turnos.get(i);
//                    JOptionPane.showMessageDialog(this, "El id del turno prioritario actual es: " + turnoActual.getId_turno(), "INFORMATION", INFORMATION_MESSAGE);
                    ban=1;
//                      if (turnos.size()>= (i+1)){
//                            if(turnos.get(i+1).getEstadoTurno().getId_Estado()== estado.getId_Estado() ){
//                                 turnos.get(i+1).setEstadoTurno(et);
//                                 this.controlador.actualizarTurno(turnos.get(i+1));
//                                         
//                            }
//
//                        }
                    break;
                }
            }
            if (ban==0){
                estado = this.controlador.buscarEstadoTurno("en espera");
                for(int j=0; j<turnos.size(); j++){
                    if(turnos.get(j).getEstadoTurno().getId_Estado()== estado.getId_Estado()){
                        turnoActual= turnos.get(j);
//                 JOptionPane.showMessageDialog(this, "El id del turno normal actual es: " + turnoActual.getId_turno(), "INFORMATION", INFORMATION_MESSAGE);

//                        if (turnos.size()>= (j+1)){
//                            if(turnos.get(j+1).getEstadoTurno().getId_Estado()== estado.getId_Estado() ){
//                                 turnos.get(j+1).setEstadoTurno(estado);
//                                  this.controlador.actualizarTurno(turnos.get(j+1));
//                            }
//
//                        }
                       break;
                    }
                }
            }
            if(turnoActual != null){
                 turnoActual.setEstadoTurno(et);
                 this.controlador.actualizarTurno(turnoActual);
            }
                   
        }
       
        return turnoActual;
    }
   
    
    
    
}
