/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import controlador.Controlador;
import controlador.exceptions.NonexistentEntityException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.table.DefaultTableModel;
import modelo.*;
/**
 *
 * @author Usuario
 */
public class GestorTramites extends javax.swing.JPanel {
private Controlador controlador;
    /**
     * Creates new form AÃ±adirTramite
     */
    public GestorTramites() {
        initComponents();
    }
    
    public GestorTramites(Controlador crt){ 
        this();
        this.controlador=crt;
        this.cargarTablaRequisitosCargados();
        this.cargarTablaTramites();
        this.cargarComboAreas();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        botonNuevo = new javax.swing.JButton();
        botonModificar = new javax.swing.JButton();
        botonAgregar = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtTramite = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTramites = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaRequisitosCargados = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        botonAgregarRequisito = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaRequisitos = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtIdRequisito = new javax.swing.JTextField();
        botonQuitarRequisito = new javax.swing.JButton();
        botonBuscar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        comboAreas = new javax.swing.JComboBox<>();
        checkArea = new javax.swing.JCheckBox();

        jPanel1.setLayout(new java.awt.BorderLayout());

        botonNuevo.setText("Nuevo");
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });

        botonModificar.setText("Modificar");
        botonModificar.setEnabled(false);
        botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarActionPerformed(evt);
            }
        });

        botonAgregar.setText("Agregar");
        botonAgregar.setEnabled(false);
        botonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarActionPerformed(evt);
            }
        });

        botonGuardar.setText("Guardar");
        botonGuardar.setEnabled(false);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });

        botonEliminar.setText("Eliminar");
        botonEliminar.setEnabled(false);
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        jLabel12.setText("Menu Tramite");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(botonNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(botonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(botonModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(52, 52, 52)
                        .addComponent(botonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(botonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonNuevo)
                    .addComponent(botonModificar)
                    .addComponent(botonAgregar)
                    .addComponent(botonGuardar)
                    .addComponent(botonEliminar))
                .addContainerGap())
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Gestor de Tramites");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(265, 265, 265)
                .addComponent(jLabel1)
                .addContainerGap(279, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("ID:");

        jLabel3.setText("Tramite:");

        txtTramite.setEnabled(false);

        tablaTramites.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaTramites);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Listado de Tramites cargados");

        tablaRequisitosCargados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaRequisitosCargados);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Listado de Requisitos cargados");

        botonAgregarRequisito.setText("Agregar Requisito");
        botonAgregarRequisito.setEnabled(false);
        botonAgregarRequisito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarRequisitoActionPerformed(evt);
            }
        });

        tablaRequisitos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tablaRequisitos);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Requisitos para el Tramite");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("AÃ±adir/Quitar requisitos al Tramite:");

        jLabel10.setText("Id Requisito");

        txtIdRequisito.setEnabled(false);

        botonQuitarRequisito.setText("Quitar Requisito");
        botonQuitarRequisito.setEnabled(false);
        botonQuitarRequisito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonQuitarRequisitoActionPerformed(evt);
            }
        });

        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        jLabel11.setText("Asignar Area:");

        comboAreas.setEnabled(false);

        checkArea.setText("Modificar Area asignada");
        checkArea.setEnabled(false);
        checkArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAreaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(29, 29, 29)
                                        .addComponent(comboAreas, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(checkArea)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtTramite, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(37, 37, 37)
                                        .addComponent(txtIdRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(botonAgregarRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(botonQuitarRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(77, 77, 77)
                                        .addComponent(jLabel4))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(32, 32, 32))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(79, 79, 79))))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(jLabel7))))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonBuscar)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTramite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkArea)
                        .addGap(6, 6, 6)))
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(comboAreas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtIdRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonAgregarRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonQuitarRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
       
          int ban=0;
        if (txtId.getText().isEmpty()){
            ban=1;   
            JOptionPane.showMessageDialog(this, "El campo id estÃ¡ vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtId.getText().toCharArray();
        
            for(int i=0; i< caracteres.length; i++){
                if( Character.isDigit(caracteres[i]) == false ){
                    ban=1;
                    JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros en el campo id", "Error", ERROR_MESSAGE);
                }
            }
        }                     
        
        if (ban==0){
       
            int id = Integer.parseInt(txtId.getText());
            Tramite tra = this.controlador.buscarTramite(id);

            if (tra == null){
                JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningÃºn Tramite registrado ", "Error", ERROR_MESSAGE);

            }else{
                txtTramite.setText(tra.getNombreTramite());
                botonModificar.setEnabled(true);   
                botonEliminar.setEnabled(true);
                this.cargarTablaRequisitos();
            }
        }
        
        botonAgregar.setEnabled(false);
  
     botonNuevo.setEnabled(true);
        
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void botonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarActionPerformed
      txtTramite.setEnabled(true);
      botonEliminar.setEnabled(true);
      botonModificar.setEnabled(false);
      botonGuardar.setEnabled(true);
      botonNuevo.setEnabled(false);
      checkArea.setEnabled(true);
      txtIdRequisito.setEnabled(true);
      botonAgregarRequisito.setEnabled(true);
      botonQuitarRequisito.setEnabled(true);
      
    }//GEN-LAST:event_botonModificarActionPerformed

    private void checkAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAreaActionPerformed
        if(checkArea.isSelected()==true){
            comboAreas.setEnabled(true);
        }else{
            comboAreas.setEnabled(false);
        }
    }//GEN-LAST:event_checkAreaActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
       int ban=0;
       if (txtTramite.getText().isEmpty()){
            ban=1;
            JOptionPane.showMessageDialog(this, "El campo Tramite estÃ¡ vacio", "Error", ERROR_MESSAGE);
       }
        
        if (ban==0){
            int id= Integer.parseInt(txtId.getText());
            Tramite tra= this.controlador.buscarTramite(id);

           if (tra == null){
               JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningÃºn Tramite registrado ", "Error", ERROR_MESSAGE);

           }else{
               String nombreTramite = String.valueOf(txtTramite.getText());
               tra.setNombreTramite(nombreTramite);
               if (checkArea.isSelected()==true){
                   String nombreArea = (String) comboAreas.getSelectedItem();
                   tra.getArea().quitarTramite(tra);
                   Area are = this.controlador.buscarArea(nombreArea);
                   tra.setArea(are);
                   are.addTramite(tra);
                   this.controlador.actualizarArea(are);
               }
               this.controlador.actualizarTramite(tra);
               JOptionPane.showMessageDialog(this, "El Tramite fue actualizado existosamente ", "Aviso", INFORMATION_MESSAGE);
               botonGuardar.setEnabled(false);  
               txtId.setText("");
               txtTramite.setText("");
               txtTramite.setEnabled(false);
               botonModificar.setEnabled(false);
               botonNuevo.setEnabled(true);
               botonEliminar.setEnabled(false);
               this.cargarTablaTramites();
               checkArea.setEnabled(false);
               
               comboAreas.setEnabled(false);
               
               botonAgregarRequisito.setEnabled(false);
               botonQuitarRequisito.setEnabled(false);
           }                  
       }

    }//GEN-LAST:event_botonGuardarActionPerformed

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
       txtTramite.setText("");
       txtId.setText("");
       txtTramite.setEnabled(true);
       botonAgregar.setEnabled(true);
       botonNuevo.setEnabled(false);
       botonBuscar.setEnabled(false);
       comboAreas.setEnabled(true);
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
       int id = Integer.parseInt(txtId.getText());
       Tramite tra= this.controlador.buscarTramite(id);
       boolean ban;
       
        if (tra == null){
            JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningÃºn Tramite registrado ", "Error", ERROR_MESSAGE);
           
        }else{
            Area are = tra.getArea();
            List<Tramite>tramites = are.getTramites();
             for (int i=0; i < tramites.size(); i++){
                   if(tramites.get(i).getId_Tramite() == tra.getId_Tramite()){
                      tramites.remove(i);
                      break;
                   }
               }
            
             
                ban=this.controlador.comprobarTramiteEnTurnos(tra.getId_Tramite());
                if (ban == false){
                    this.controlador.eliminarTramite(tra);
                    JOptionPane.showMessageDialog(this, "El Tramite fue eliminado existosamente ", "Aviso", INFORMATION_MESSAGE);
                    this.cargarTablaTramites();
                }else{
                     JOptionPane.showMessageDialog(this, "El tramite no pudo eliminarse porque se cargÃ³ en al menos un turno" , "Error", ERROR_MESSAGE);
                }
                   
           
           
            
            txtId.setText("");
            txtTramite.setText("");
           // this.controlador.removerTramite(tra);
        }
        
        botonModificar.setEnabled(false);
        botonAgregar.setEnabled(false);
        botonEliminar.setEnabled(false);
        botonGuardar.setEnabled(false);
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void botonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarActionPerformed
         int ban=0;
       if (txtTramite.getText().isEmpty()){
           ban=1;
            JOptionPane.showMessageDialog(this, "El campo Tramite estÃ¡ vacio", "Error", ERROR_MESSAGE);
       }else{
            char []caracteres = txtTramite.getText().toCharArray();
        for(int i=0; i< caracteres.length; i++){
            if( Character.isDigit(caracteres[i]) == true ){
                ban=1;
                JOptionPane.showMessageDialog(this, "Solo debe ingresar letras en el campo Tramite", "Error", ERROR_MESSAGE);
            }
        }
       }
        
        if (ban==0){
        String nombreArea = (String) comboAreas.getSelectedItem();
        Area are = this.controlador.buscarArea(nombreArea);
        Tramite tra = new Tramite (txtTramite.getText(), are);
        are.addTramite(tra);
        this.controlador.persistirTramite(tra);
        this.controlador.actualizarArea(are);
        JOptionPane.showMessageDialog(this, "El Tramite fue cargado existosamente ", "Aviso", INFORMATION_MESSAGE);
        this.cargarTablaTramites();
        txtTramite.setEnabled(false);
        botonAgregar.setEnabled(false);
        txtTramite.setText("");
        //txtId.setText("");
        botonBuscar.setEnabled(true);
        botonNuevo.setEnabled(true);
        checkArea.setEnabled(false);
        txtIdRequisito.setEnabled(true);
        txtIdRequisito.setText("");
        String id_nuevo = String.valueOf(tra.getId_Tramite());
        txtId.setText(id_nuevo);
        botonAgregarRequisito.setEnabled(true);
        botonAgregarRequisito.setEnabled(true);
        
        }

    }//GEN-LAST:event_botonAgregarActionPerformed

    private void botonAgregarRequisitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarRequisitoActionPerformed
        int ban=0;
        int id = Integer.parseInt(txtId.getText());
        Tramite tra = this.controlador.buscarTramite(id);
        
        if (txtIdRequisito.getText().isEmpty()){
            ban=1;   
            JOptionPane.showMessageDialog(this, "El campo id_requisito estÃ¡ vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtId.getText().toCharArray();
        
            for(int i=0; i< caracteres.length; i++){
                if( Character.isDigit(caracteres[i]) == false ){
                    ban=1;
                    JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros en el campo id_requisito", "Error", ERROR_MESSAGE);
                }
            }
        }                     
        
        if (ban==0){
       
            int id_req = Integer.parseInt(txtIdRequisito.getText());
            Requisito req = this.controlador.buscarRequisito(id_req);

            if (req == null){
                JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningÃºn Requisito registrado ", "Error", ERROR_MESSAGE);

            }else{
                int band = tra.comprobarRequisito(req);
                if (band == 0){
                    tra.addRequisito(req);
                    this.controlador.actualizarRequisito(req);
                    
                    this.controlador.actualizarTramite(tra);
                    this.cargarTablaRequisitos();
                    JOptionPane.showMessageDialog(this, "El Requisito fue cargado existosamente ", "Aviso", INFORMATION_MESSAGE);
                }else{
                    JOptionPane.showMessageDialog(this, "El requisito ya se encuentra cargado para este tramite ", "Error", ERROR_MESSAGE);
                }
                
            }
        }
    }//GEN-LAST:event_botonAgregarRequisitoActionPerformed

    private void botonQuitarRequisitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonQuitarRequisitoActionPerformed
        int ban=0;
        int id = Integer.parseInt(txtId.getText());
        Tramite tra = this.controlador.buscarTramite(id);
        
        if (txtIdRequisito.getText().isEmpty()){
            ban=1;   
            JOptionPane.showMessageDialog(this, "El campo id_requisito estÃ¡ vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtId.getText().toCharArray();
        
            for(int i=0; i< caracteres.length; i++){
                if( Character.isDigit(caracteres[i]) == false ){
                    ban=1;
                    JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros en el campo id_requisito", "Error", ERROR_MESSAGE);
                }
            }
        }                     
        
        if (ban==0){
       
            int id_req = Integer.parseInt(txtIdRequisito.getText());
            Requisito req = this.controlador.buscarRequisito(id_req);

            if (req == null){
                JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningÃºn Requisito registrado ", "Error", ERROR_MESSAGE);

            }else{
                int band = tra.comprobarRequisito(req);
                if (band == 1){
                    tra.quitarRequisito(req);
                  
                    this.controlador.actualizarRequisito(req);
                    this.controlador.actualizarTramite(tra);
                    this.cargarTablaRequisitos();
                    JOptionPane.showMessageDialog(this, "El Requisito fue eliminado existosamente ", "Aviso", INFORMATION_MESSAGE);
                }else{
                    JOptionPane.showMessageDialog(this, "El requisito seleccionado no se encuentra cargado para este tramite ", "Error", ERROR_MESSAGE);
                }
                
            }
        }
    }//GEN-LAST:event_botonQuitarRequisitoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAgregar;
    private javax.swing.JButton botonAgregarRequisito;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonModificar;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonQuitarRequisito;
    private javax.swing.JCheckBox checkArea;
    private javax.swing.JComboBox<String> comboAreas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tablaRequisitos;
    private javax.swing.JTable tablaRequisitosCargados;
    private javax.swing.JTable tablaTramites;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtIdRequisito;
    private javax.swing.JTextField txtTramite;
    // End of variables declaration//GEN-END:variables

    public void cargarTablaRequisitosCargados(){
        	
       // Carga de la tabla requisitos cargados
        DefaultTableModel modelo2 = new DefaultTableModel();
        modelo2.addColumn("Id");//0
        modelo2.addColumn("Requisito");//1
       
        List<Requisito> requisitos = this.controlador.ListarRequisitos();
         modelo2.setRowCount(requisitos.size());
        
        for(int i = 0; i < requisitos.size(); i++){
            
            modelo2.setValueAt(requisitos.get(i).getId(), i, 0);
            modelo2.setValueAt(requisitos.get(i).getNombreRequisito(), i, 1);                                  
        }
        this.tablaRequisitosCargados.setModel(modelo2);
        modelo2=null;       
   
    }
    
      public void cargarTablaTramites(){
        	
       // Carga de la tabla tramites
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Id");//0
        modelo.addColumn("Tramite");//1
       
         List<Tramite> tramites = this.controlador.ListarTramites();
         modelo.setRowCount(tramites.size());
        
        for(int i = 0; i < tramites.size(); i++){
            
            modelo.setValueAt(tramites.get(i).getId_Tramite(), i, 0);
            modelo.setValueAt(tramites.get(i).getNombreTramite(), i, 1);                                  
        }
        this.tablaTramites.setModel(modelo);
        modelo=null;       
   
    }
      
        public void cargarTablaRequisitos(){
        int id_tramite = Integer.parseInt(txtId.getText());
        Tramite tra = this.controlador.buscarTramite(id_tramite); 
        // Carga de la tabla de requisitos generales
        DefaultTableModel modelo2 = new DefaultTableModel();
        modelo2.addColumn("Id");//0
        modelo2.addColumn("Requisito");//1
        List<Requisito> requisitos= this.controlador.ListarRequisitosTramite(id_tramite);
         modelo2.setRowCount(requisitos.size());
        
        for(int i = 0; i < requisitos.size(); i++){
            
            modelo2.setValueAt(requisitos.get(i).getId(), i, 0);
            modelo2.setValueAt(requisitos.get(i).getNombreRequisito(), i, 1);                                  
        }
        this.tablaRequisitos.setModel(modelo2);
        modelo2=null;
        
       
    }
        
        public void cargarComboAreas(){
        List <Area> listaAreas = controlador.ListarAreas();
        for(int i = 0; i < listaAreas.size() ; i++ ){
             comboAreas.addItem(listaAreas.get(i).getNombreArea());
        }
    }



}
