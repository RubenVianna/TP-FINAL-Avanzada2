/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import controlador.Controlador;
import java.util.List;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.table.DefaultTableModel;
import modelo.*;

/**
 *
 * @author Usuario
 */
public class GestorDeClases extends javax.swing.JPanel {
 private Controlador controlador;
    /**
     * Creates new form GestorDeClases
     */
    public GestorDeClases() {
        initComponents();
        
    }
    
     public GestorDeClases(Controlador crt){ 
        this();
        this.controlador=crt;
        this.cargarTablas();
    }

     
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtIdRequisito = new javax.swing.JTextField();
        botonBuscarReq = new javax.swing.JButton();
        txtRequisito = new javax.swing.JTextField();
        botonModificarReq = new javax.swing.JButton();
        botonEliminarReq = new javax.swing.JButton();
        botonGuardarReq = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRequisitos = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtIdTipo = new javax.swing.JTextField();
        txtNombreTipo = new javax.swing.JTextField();
        botonBuscarTipo = new javax.swing.JButton();
        botonModificarTipo = new javax.swing.JButton();
        botonGuardarTipo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaTiposCliente = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtIdEstado = new javax.swing.JTextField();
        txtNombreEstado = new javax.swing.JTextField();
        botonBuscarEstado = new javax.swing.JButton();
        botonEliminarTipo = new javax.swing.JButton();
        botonModificarEstado = new javax.swing.JButton();
        botonGuardarEstado = new javax.swing.JButton();
        botonEliminarEstado = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaEstadosTurno = new javax.swing.JTable();
        botonAgregarReq = new javax.swing.JButton();
        botonAgregarTipo = new javax.swing.JButton();
        botonAgregarEstado = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtIdCondicion = new javax.swing.JTextField();
        txtNombreCondicion = new javax.swing.JTextField();
        botonBuscarCondicion = new javax.swing.JButton();
        botonModificarCondicion = new javax.swing.JButton();
        botonGuardarCondicion = new javax.swing.JButton();
        botonEliminarCondicion = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaCondicionesPrioritarias = new javax.swing.JTable();
        botonAgregarCondicion = new javax.swing.JButton();
        botonNuevoReq = new javax.swing.JButton();
        botonNuevoTipo = new javax.swing.JButton();
        botonNuevoEstado = new javax.swing.JButton();
        botonNuevoCondicion = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Gestor de Clases");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(328, 328, 328)
                .addComponent(jLabel1)
                .addContainerGap(869, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1376, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 51, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jLabel2.setText("N° Requisito");

        botonBuscarReq.setText("Buscar");
        botonBuscarReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarReqActionPerformed(evt);
            }
        });

        txtRequisito.setEnabled(false);

        botonModificarReq.setText("Modificar");
        botonModificarReq.setEnabled(false);
        botonModificarReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarReqActionPerformed(evt);
            }
        });

        botonEliminarReq.setText("Eliminar");
        botonEliminarReq.setEnabled(false);
        botonEliminarReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarReqActionPerformed(evt);
            }
        });

        botonGuardarReq.setText("Guardar");
        botonGuardarReq.setEnabled(false);
        botonGuardarReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarReqActionPerformed(evt);
            }
        });

        tablaRequisitos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaRequisitos);

        jLabel3.setText("N° Tipo Cliente");

        txtNombreTipo.setEnabled(false);

        botonBuscarTipo.setText("Buscar");
        botonBuscarTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarTipoActionPerformed(evt);
            }
        });

        botonModificarTipo.setText("Modificar");
        botonModificarTipo.setEnabled(false);
        botonModificarTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarTipoActionPerformed(evt);
            }
        });

        botonGuardarTipo.setText("Guardar");
        botonGuardarTipo.setEnabled(false);
        botonGuardarTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarTipoActionPerformed(evt);
            }
        });

        tablaTiposCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaTiposCliente);

        jLabel4.setText("N° Estado Turno");

        txtNombreEstado.setEnabled(false);

        botonBuscarEstado.setText("Buscar");
        botonBuscarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarEstadoActionPerformed(evt);
            }
        });

        botonEliminarTipo.setText("Eliminar");
        botonEliminarTipo.setEnabled(false);
        botonEliminarTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarTipoActionPerformed(evt);
            }
        });

        botonModificarEstado.setText("Modificar");
        botonModificarEstado.setEnabled(false);
        botonModificarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarEstadoActionPerformed(evt);
            }
        });

        botonGuardarEstado.setText("Guardar");
        botonGuardarEstado.setEnabled(false);
        botonGuardarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarEstadoActionPerformed(evt);
            }
        });

        botonEliminarEstado.setText("Eliminar");
        botonEliminarEstado.setEnabled(false);
        botonEliminarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarEstadoActionPerformed(evt);
            }
        });

        tablaEstadosTurno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tablaEstadosTurno);

        botonAgregarReq.setText("Agregar");
        botonAgregarReq.setEnabled(false);
        botonAgregarReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarReqActionPerformed(evt);
            }
        });

        botonAgregarTipo.setText("Agregar");
        botonAgregarTipo.setEnabled(false);
        botonAgregarTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarTipoActionPerformed(evt);
            }
        });

        botonAgregarEstado.setText("Agregar");
        botonAgregarEstado.setEnabled(false);
        botonAgregarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarEstadoActionPerformed(evt);
            }
        });

        jLabel5.setText("N° Condicion prioritaria");

        txtNombreCondicion.setEnabled(false);

        botonBuscarCondicion.setText("Buscar");
        botonBuscarCondicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarCondicionActionPerformed(evt);
            }
        });

        botonModificarCondicion.setText("Modificar");
        botonModificarCondicion.setEnabled(false);
        botonModificarCondicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarCondicionActionPerformed(evt);
            }
        });

        botonGuardarCondicion.setText("Guardar");
        botonGuardarCondicion.setEnabled(false);
        botonGuardarCondicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarCondicionActionPerformed(evt);
            }
        });

        botonEliminarCondicion.setText("Eliminar");
        botonEliminarCondicion.setEnabled(false);
        botonEliminarCondicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarCondicionActionPerformed(evt);
            }
        });

        tablaCondicionesPrioritarias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tablaCondicionesPrioritarias);

        botonAgregarCondicion.setText("Agregar");
        botonAgregarCondicion.setEnabled(false);
        botonAgregarCondicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarCondicionActionPerformed(evt);
            }
        });

        botonNuevoReq.setText("Nuevo");
        botonNuevoReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoReqActionPerformed(evt);
            }
        });

        botonNuevoTipo.setText("Nuevo");
        botonNuevoTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoTipoActionPerformed(evt);
            }
        });

        botonNuevoEstado.setText("Nuevo");
        botonNuevoEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoEstadoActionPerformed(evt);
            }
        });

        botonNuevoCondicion.setText("Nuevo");
        botonNuevoCondicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoCondicionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtNombreTipo)
                                            .addComponent(botonAgregarTipo, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                            .addComponent(botonNuevoTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(botonModificarTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(botonEliminarTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(botonGuardarTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtIdRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                                .addComponent(botonNuevoReq, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(3, 3, 3)))
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(botonBuscarReq, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(botonModificarReq, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addComponent(botonGuardarReq, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtIdTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(botonAgregarReq, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(botonEliminarReq, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(botonBuscarTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(botonAgregarCondicion, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                    .addComponent(botonNuevoCondicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(botonModificarCondicion, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(botonEliminarCondicion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(botonGuardarCondicion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botonNuevoEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonAgregarEstado, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(txtNombreEstado)
                            .addComponent(txtIdEstado)
                            .addComponent(txtIdCondicion)
                            .addComponent(txtNombreCondicion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botonEliminarEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonGuardarEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonModificarEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonBuscarEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonBuscarCondicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(70, 70, 70)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtIdRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(botonBuscarReq)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtRequisito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonModificarReq))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonGuardarReq)
                            .addComponent(botonNuevoReq))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonEliminarReq)
                            .addComponent(botonAgregarReq))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtIdTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonBuscarTipo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombreTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonModificarTipo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonGuardarTipo)
                            .addComponent(botonNuevoTipo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonEliminarTipo)
                            .addComponent(botonAgregarTipo))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtIdEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonBuscarEstado))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombreEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonModificarEstado))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonGuardarEstado)
                            .addComponent(botonNuevoEstado))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonEliminarEstado)
                            .addComponent(botonAgregarEstado)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtIdCondicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonBuscarCondicion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombreCondicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonModificarCondicion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonGuardarCondicion)
                            .addComponent(botonNuevoCondicion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonEliminarCondicion)
                            .addComponent(botonAgregarCondicion)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(175, 175, 175))
        );

        jPanel2.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonBuscarReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarReqActionPerformed
        int ban=0;
        if (txtIdRequisito.getText().isEmpty()){
         ban=1;   
         JOptionPane.showMessageDialog(this, "El campo id Requisito esta vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtIdRequisito.getText().toCharArray();
        
        for(int i=0; i< caracteres.length; i++){
            if( Character.isDigit(caracteres[i]) == false ){
                ban=1;
                JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros", "Error", ERROR_MESSAGE);
            }
        }
        }                     
        
        if (ban==0){
       
       int id_req = Integer.parseInt(txtIdRequisito.getText());
       Requisito unReq = this.controlador.buscarRequisito(id_req);
        
       if (unReq == null){
           JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningún requisito ya registrado ", "Error", ERROR_MESSAGE);
           
       }else{
           txtRequisito.setText(unReq.getNombreRequisito());
           botonModificarReq.setEnabled(true);   
           botonEliminarReq.setEnabled(true);
       }
        }
        
        botonAgregarReq.setEnabled(false);
  
     botonNuevoReq.setEnabled(true);
    
       
    }//GEN-LAST:event_botonBuscarReqActionPerformed

    private void botonGuardarReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarReqActionPerformed
        int ban=0;
       if (txtRequisito.getText().isEmpty()){
           ban=1;
            JOptionPane.showMessageDialog(this, "El campo Requisito esta vacio", "Error", ERROR_MESSAGE);
       }
        
        if (ban==0){
        int id_req = Integer.parseInt(txtIdRequisito.getText());
        Requisito unReq = this.controlador.buscarRequisito(id_req);
        
       if (unReq == null){
           JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningún requisito ya registrado ", "Error", ERROR_MESSAGE);
           
       }else{
           String nombreReq = String.valueOf(txtRequisito.getText());
           unReq.setNombreRequisito(nombreReq);
           this.controlador.actualizarRequisito(unReq);
           JOptionPane.showMessageDialog(this, "El Requisito fue actualizado existosamente ", "Aviso", INFORMATION_MESSAGE);
           botonGuardarReq.setEnabled(false);  
           txtIdRequisito.setText("");
           txtRequisito.setText("");
           botonNuevoReq.setEnabled(true);
           botonEliminarReq.setEnabled(false);
           this.cargarTablas();
       }
          
           
       }
        
       
    }//GEN-LAST:event_botonGuardarReqActionPerformed

    private void botonModificarReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarReqActionPerformed
      txtRequisito.setEnabled(true);
      botonEliminarReq.setEnabled(true);
      botonModificarReq.setEnabled(false);
      botonGuardarReq.setEnabled(true);
      botonNuevoReq.setEnabled(false);
    }//GEN-LAST:event_botonModificarReqActionPerformed

    private void botonEliminarReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarReqActionPerformed
        int ban=0;
        if (txtIdRequisito.getText().isEmpty()){
            ban=1;   
            JOptionPane.showMessageDialog(this, "El campo id Requisito esta vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtIdRequisito.getText().toCharArray();

            for(int i=0; i< caracteres.length; i++){
                if( Character.isDigit(caracteres[i]) == false ){
                    ban=1;
                    JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros", "Error", ERROR_MESSAGE);
                }
            }
        }                     
        
if (ban==0){    
               
        int id_req = Integer.parseInt(txtIdRequisito.getText());
        Requisito req = this.controlador.buscarRequisito(id_req);
        if (req == null){
            JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningún requisito ya registrado ", "Error", ERROR_MESSAGE);
           
        }else{
            this.controlador.quitarRequisitoALosTramites(req);
            
            this.controlador.eliminarRequisito(req);
            JOptionPane.showMessageDialog(this, "El Requisito fue eliminado existosamente ", "Aviso", INFORMATION_MESSAGE);
            this.cargarTablas();
            txtIdRequisito.setText("");
            txtRequisito.setText("");
           // this.controlador.removerRequisito(req);
        }
        
        botonModificarReq.setEnabled(false);
        botonAgregarReq.setEnabled(false);
        botonEliminarReq.setEnabled(false);
        botonGuardarReq.setEnabled(false);
}        
    }//GEN-LAST:event_botonEliminarReqActionPerformed

    private void botonAgregarReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarReqActionPerformed
        int ban=0;
       if (txtRequisito.getText().isEmpty()){
           ban=1;
            JOptionPane.showMessageDialog(this, "El campo Requisito esta vacio", "Error", ERROR_MESSAGE);
       }
//       else{
//            char []caracteres = txtRequisito.getText().toCharArray();
//        for(int i=0; i< caracteres.length; i++){
//            if( Character.isDigit(caracteres[i]) == true ){
//                ban=1;
//                JOptionPane.showMessageDialog(this, "Solo debe ingresar letras en el campo Requisito", "Error", ERROR_MESSAGE);
//            }
//        }
//       }
        
        if (ban==0){
        Requisito ReqTemp = new Requisito (txtRequisito.getText());
        
        this.controlador.persistirRequisito(ReqTemp); 
        JOptionPane.showMessageDialog(this, "El Requisito fue cargado existosamente ", "Aviso", INFORMATION_MESSAGE);
        this.cargarTablas();
        txtRequisito.setEnabled(false);
        botonAgregarReq.setEnabled(false);
        txtRequisito.setText("");
        txtIdRequisito.setText("");
        botonBuscarReq.setEnabled(true);
        botonNuevoReq.setEnabled(true);
        }
        
        
        
    }//GEN-LAST:event_botonAgregarReqActionPerformed

    private void botonNuevoReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoReqActionPerformed
        txtRequisito.setText("");
        txtIdRequisito.setText("");
        txtRequisito.setEnabled(true);
       botonAgregarReq.setEnabled(true);
       botonNuevoReq.setEnabled(false);
       botonBuscarReq.setEnabled(false);
    }//GEN-LAST:event_botonNuevoReqActionPerformed

    private void botonNuevoTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoTipoActionPerformed
        txtNombreTipo.setText("");
        txtIdTipo.setText("");
        txtNombreTipo.setEnabled(true);
       botonAgregarTipo.setEnabled(true);
       botonNuevoTipo.setEnabled(false);
       botonBuscarTipo.setEnabled(false);
        
    }//GEN-LAST:event_botonNuevoTipoActionPerformed

    private void botonModificarTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarTipoActionPerformed
        
      txtNombreTipo.setEnabled(true);
      botonEliminarTipo.setEnabled(true);
      botonModificarTipo.setEnabled(false);
      botonGuardarTipo.setEnabled(true);
      botonNuevoTipo.setEnabled(false);
        
        
    }//GEN-LAST:event_botonModificarTipoActionPerformed

    private void botonGuardarTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarTipoActionPerformed
        int ban=0;
       if (txtNombreTipo.getText().isEmpty()){
           ban=1;
            JOptionPane.showMessageDialog(this, "El campo Tipo Cliente está vacio", "Error", ERROR_MESSAGE);
       }
        
        if (ban==0){
        int id_Tipo = Integer.parseInt(txtIdTipo.getText());
        TipoCliente unTipo = this.controlador.buscarTipoCliente(id_Tipo);
        
       if (unTipo == null){
           JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningún tipo de cliente ya registrado ", "Error", ERROR_MESSAGE);
           
       }else{
           String nombreTipo = String.valueOf(txtNombreTipo.getText());
           unTipo.setNombre(nombreTipo);
           this.controlador.actualizarTipoCliente(unTipo);
           JOptionPane.showMessageDialog(this, "El Tipo de Cliente fue actualizado existosamente ", "Aviso", INFORMATION_MESSAGE);
           botonGuardarTipo.setEnabled(false);  
           txtIdTipo.setText("");
           txtNombreTipo.setText("");
           botonNuevoTipo.setEnabled(true);
           botonEliminarTipo.setEnabled(false);
           this.cargarTablas();
       }
          
           
       }
        
        
        
    }//GEN-LAST:event_botonGuardarTipoActionPerformed

    private void botonEliminarTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarTipoActionPerformed
        int ban=0;
        if (txtIdTipo.getText().isEmpty()){
         ban=1;   
         JOptionPane.showMessageDialog(this, "El campo id Tipo cliente está vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtIdTipo.getText().toCharArray();
        
        for(int i=0; i< caracteres.length; i++){
            if( Character.isDigit(caracteres[i]) == false ){
                ban=1;
                JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros", "Error", ERROR_MESSAGE);
            }
        }
        }                     
        
if (ban==0){        
   int id_Tipo= Integer.parseInt(txtIdTipo.getText());
        TipoCliente tp = this.controlador.buscarTipoCliente(id_Tipo);
        if (tp == null){
            JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningún tipo de cliente ya registrado ", "Error", ERROR_MESSAGE);
           
        }else{
            this.controlador.quitarTipoClienteALosClientes(tp);
            this.controlador.eliminarTipoCliente(tp);
            JOptionPane.showMessageDialog(this, "El Tipo de Cliente fue eliminado existosamente ", "Aviso", INFORMATION_MESSAGE);
            this.cargarTablas();
            txtIdTipo.setText("");
            txtNombreTipo.setText("");
           //this.controlador.removerRequisito(req);
        }
}        
        botonModificarReq.setEnabled(false);
        botonAgregarReq.setEnabled(false);
        botonEliminarReq.setEnabled(false);
        botonGuardarReq.setEnabled(false);
        
        
    }//GEN-LAST:event_botonEliminarTipoActionPerformed

    private void botonAgregarTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarTipoActionPerformed
         int ban=0;
       if (txtNombreTipo.getText().isEmpty()){
           ban=1;
            JOptionPane.showMessageDialog(this, "El campo Tipo de Cliente está vacio", "Error", ERROR_MESSAGE);
       }else{
            char []caracteres = txtNombreTipo.getText().toCharArray();
        for(int i=0; i< caracteres.length; i++){
            if( Character.isDigit(caracteres[i]) == true ){
                ban=1;
                JOptionPane.showMessageDialog(this, "Solo debe ingresar letras en el campo tipo de cliente", "Error", ERROR_MESSAGE);
            }
        }
       }
        
        if (ban==0){
        TipoCliente tc = new TipoCliente(txtNombreTipo.getText());
        
        this.controlador.persistirTipoCliente(tc); 
        JOptionPane.showMessageDialog(this, "El Tipo de cliente fue cargado existosamente ", "Aviso", INFORMATION_MESSAGE);
        this.cargarTablas();
        txtNombreTipo.setEnabled(false);
        botonAgregarTipo.setEnabled(false);
        txtNombreTipo.setText("");
        txtIdTipo.setText("");
        botonBuscarTipo.setEnabled(true);
        botonNuevoTipo.setEnabled(true);
        }
        
        
    }//GEN-LAST:event_botonAgregarTipoActionPerformed

    private void botonBuscarTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarTipoActionPerformed
        int ban=0;
        if (txtIdTipo.getText().isEmpty()){
         ban=1;   
         JOptionPane.showMessageDialog(this, "El campo id Tipo cliente está vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtIdTipo.getText().toCharArray();
        
        for(int i=0; i< caracteres.length; i++){
            if( Character.isDigit(caracteres[i]) == false ){
                ban=1;
                JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros", "Error", ERROR_MESSAGE);
            }
        }
        }                     
        
        if (ban==0){
       
       int id_Tipo = Integer.parseInt(txtIdTipo.getText());
       TipoCliente tc= this.controlador.buscarTipoCliente(id_Tipo);
        
        if (tc== null){
            JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningún Tipo cliente ya registrado ", "Error", ERROR_MESSAGE);

        }else{
            txtNombreTipo.setText(tc.getNombre());
            botonModificarTipo.setEnabled(true);   
            botonEliminarTipo.setEnabled(true);
        }
       }
        
        botonAgregarTipo.setEnabled(false);
  
     botonNuevoTipo.setEnabled(true);
        
        
    }//GEN-LAST:event_botonBuscarTipoActionPerformed

    private void botonNuevoEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoEstadoActionPerformed
        txtNombreEstado.setText("");
        txtIdEstado.setText("");
        txtNombreEstado.setEnabled(true);
       botonAgregarEstado.setEnabled(true);
       botonNuevoEstado.setEnabled(false);
       botonBuscarEstado.setEnabled(false);       
        
    }//GEN-LAST:event_botonNuevoEstadoActionPerformed

    private void botonAgregarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarEstadoActionPerformed
         int ban=0;
       if (txtNombreEstado.getText().isEmpty()){
           ban=1;
            JOptionPane.showMessageDialog(this, "El campo Estado turno esta vacio", "Error", ERROR_MESSAGE);
       }else{
            char []caracteres = txtNombreEstado.getText().toCharArray();
        for(int i=0; i< caracteres.length; i++){
            if( Character.isDigit(caracteres[i]) == true ){
                ban=1;
                JOptionPane.showMessageDialog(this, "Solo debe ingresar letras en el campo Estado Turno", "Error", ERROR_MESSAGE);
            }
        }
       }
        
        if (ban==0){
        EstadoTurno et = new EstadoTurno (txtNombreEstado.getText());
        
        this.controlador.persistirEstadoTurno(et); 
        JOptionPane.showMessageDialog(this, "El Estado turno fue cargado existosamente ", "Aviso", INFORMATION_MESSAGE);
        this.cargarTablas();
        txtNombreEstado.setEnabled(false);
        botonAgregarEstado.setEnabled(false);
        txtNombreEstado.setText("");
        txtIdEstado.setText("");
        botonBuscarEstado.setEnabled(true);
        botonNuevoEstado.setEnabled(true);
        }
        
        
    }//GEN-LAST:event_botonAgregarEstadoActionPerformed

    private void botonModificarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarEstadoActionPerformed
       txtNombreEstado.setEnabled(true);
      botonEliminarEstado.setEnabled(true);
      botonModificarEstado.setEnabled(false);
      botonGuardarEstado.setEnabled(true);
      botonNuevoEstado.setEnabled(false);
    }//GEN-LAST:event_botonModificarEstadoActionPerformed

    private void botonGuardarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarEstadoActionPerformed
       int ban=0;
       if (txtNombreEstado.getText().isEmpty()){
           ban=1;
            JOptionPane.showMessageDialog(this, "El campo Estado Turno está vacio", "Error", ERROR_MESSAGE);
       }
        
        if (ban==0){
            int id_et = Integer.parseInt(txtIdEstado.getText());
            EstadoTurno et = this.controlador.buscarEstadoTurno(id_et);
        
            if (et == null){
                JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningún requisito ya registrado ", "Error", ERROR_MESSAGE);

            }else{
                String nombreEstado = String.valueOf(txtNombreEstado.getText());
                et.setNombre(nombreEstado);
                this.controlador.actualizarEstadoTurno(et);
                JOptionPane.showMessageDialog(this, "El Estado de turno fue actualizado existosamente ", "Aviso", INFORMATION_MESSAGE);
                    botonGuardarEstado.setEnabled(false);  
                txtIdEstado.setText("");
                txtNombreEstado.setText("");
                botonNuevoEstado.setEnabled(true);
                botonEliminarEstado.setEnabled(false);
                this.cargarTablas();
            }          
           
        }
        
    }//GEN-LAST:event_botonGuardarEstadoActionPerformed

    private void botonEliminarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarEstadoActionPerformed
 int ban=0;
 boolean bandera;
        if (txtIdEstado.getText().isEmpty()){
            ban=1;   
            JOptionPane.showMessageDialog(this, "El campo id Estado está vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtIdEstado.getText().toCharArray();
        
            for(int i=0; i< caracteres.length; i++){
                if( Character.isDigit(caracteres[i]) == false ){
                    ban=1;
                    JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros", "Error", ERROR_MESSAGE);
                }
            }
        }                     
        
        if (ban==0){        
             int id_Estado = Integer.parseInt(txtIdEstado.getText());
             EstadoTurno et = this.controlador.buscarEstadoTurno(id_Estado);
             if (et == null){
                 JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningún estado turno ya registrado ", "Error", ERROR_MESSAGE);

             }else{
                 bandera= this.controlador.comprobarEstadoTurnoEnTurnos(et.getId_Estado());
                 if (bandera==false){
                      this.controlador.eliminarEstadoTurno(et);
                        JOptionPane.showMessageDialog(this, "El Estadoturno fue eliminado existosamente ", "Aviso", INFORMATION_MESSAGE);
                        this.cargarTablas();
                   }else{
                     JOptionPane.showMessageDialog(this, "El estadoturno no pudo eliminarse porque se cargó en al menos un turno" , "Error", ERROR_MESSAGE);
                  }
                
                 txtIdEstado.setText("");
                 txtNombreEstado.setText("");
                // this.controlador.removerEstadoTurno(req);
             }

             botonModificarEstado.setEnabled(false);
             botonAgregarEstado.setEnabled(false);
             botonEliminarEstado.setEnabled(false);
             botonGuardarEstado.setEnabled(false);

        }
    }//GEN-LAST:event_botonEliminarEstadoActionPerformed

    private void botonBuscarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarEstadoActionPerformed
        int ban=0;
        if (txtIdEstado.getText().isEmpty()){
            ban=1;   
            JOptionPane.showMessageDialog(this, "El campo id Estado está vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtIdEstado.getText().toCharArray();
        
            for(int i=0; i< caracteres.length; i++){
                if( Character.isDigit(caracteres[i]) == false ){
                    ban=1;
                    JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros", "Error", ERROR_MESSAGE);
                }
            }
        }                     
        
        if (ban==0){
       
            int id_Estado = Integer.parseInt(txtIdEstado.getText());
            EstadoTurno et = this.controlador.buscarEstadoTurno(id_Estado);

            if (et == null){
                JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ningún Estado turno ya registrado ", "Error", ERROR_MESSAGE);

            }else{
                txtNombreEstado.setText(et.getNombre());
                botonModificarEstado.setEnabled(true);   
                botonEliminarEstado.setEnabled(true);
            }
        }
        
        botonAgregarEstado.setEnabled(false);
  
     botonNuevoEstado.setEnabled(true);
        
        
    }//GEN-LAST:event_botonBuscarEstadoActionPerformed

    private void botonNuevoCondicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoCondicionActionPerformed
        txtNombreCondicion.setText("");
        txtIdCondicion.setText("");
        txtNombreCondicion.setEnabled(true);
       botonAgregarCondicion.setEnabled(true);
       botonNuevoCondicion.setEnabled(false);
       botonBuscarCondicion.setEnabled(false);
                
    }//GEN-LAST:event_botonNuevoCondicionActionPerformed

    private void botonModificarCondicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarCondicionActionPerformed
      txtNombreCondicion.setEnabled(true);
      botonEliminarCondicion.setEnabled(true);
      botonModificarCondicion.setEnabled(false);
      botonGuardarCondicion.setEnabled(true);
      botonNuevoCondicion.setEnabled(false);
               
    }//GEN-LAST:event_botonModificarCondicionActionPerformed

    private void botonGuardarCondicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarCondicionActionPerformed
       int ban=0;
       if (txtNombreCondicion.getText().isEmpty()){
           ban=1;
           JOptionPane.showMessageDialog(this, "El campo Condicion está vacio", "Error", ERROR_MESSAGE);
       }
        
        if (ban==0){
        int id_Condicion = Integer.parseInt(txtIdCondicion.getText());
        CondicionPrioritaria cp = this.controlador.buscarCondicionPrioritaria(id_Condicion);
        
            if (cp == null){
                JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ninguna Condicion prioritaria ya registrado ", "Error", ERROR_MESSAGE);

            }else{
                String nombreCondicion = String.valueOf(txtNombreCondicion.getText());
                cp.setMotivo(nombreCondicion);
                this.controlador.actualizarCondicionPrioritaria(cp);
                JOptionPane.showMessageDialog(this, "La condicion prioritaria fue actualizada existosamente ", "Aviso", INFORMATION_MESSAGE);
                botonGuardarCondicion.setEnabled(false);  
                txtIdCondicion.setText("");
                txtNombreCondicion.setText("");
                botonNuevoCondicion.setEnabled(true);
                botonEliminarCondicion.setEnabled(false);
                this.cargarTablas();
            }                     
       }
        
    }//GEN-LAST:event_botonGuardarCondicionActionPerformed

    private void botonEliminarCondicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarCondicionActionPerformed
         int ban=0;
         boolean bandera;
        if (txtIdCondicion.getText().isEmpty()){
         ban=1;   
         JOptionPane.showMessageDialog(this, "El campo id Condicion está vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtIdCondicion.getText().toCharArray();

            for(int i=0; i< caracteres.length; i++){
                if( Character.isDigit(caracteres[i]) == false ){
                    ban=1;
                    JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros en el campo id", "Error", ERROR_MESSAGE);
                }
            }
        }           
         
        if (ban==0){
            int id_Condicion = Integer.parseInt(txtIdCondicion.getText());
            CondicionPrioritaria cp = this.controlador.buscarCondicionPrioritaria(id_Condicion);
            if (cp == null){
                JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ninguna condicion ya registrado ", "Error", ERROR_MESSAGE);

            }else{
                bandera= this.controlador.comprobarCondicionPrioritariaEnTurnos(id_Condicion);
                if (bandera==false){
                    this.controlador.eliminarCondicionPrioritaria(cp);
                    JOptionPane.showMessageDialog(this, "La Condicion prioritaria fue eliminada existosamente ", "Aviso", INFORMATION_MESSAGE);
                    this.cargarTablas();
                  }else{
                     JOptionPane.showMessageDialog(this, "La condicion prioritaria no pudo eliminarse porque se cargó en al menos un turno" , "Error", ERROR_MESSAGE);
                }
                
                txtIdCondicion.setText("");
                txtNombreCondicion.setText("");
               // this.controlador.removerCondicionPrioritaria(cp);
            }

            botonModificarCondicion.setEnabled(false);
            botonAgregarCondicion.setEnabled(false);
            botonEliminarCondicion.setEnabled(false);
            botonGuardarCondicion.setEnabled(false);
        }
    }//GEN-LAST:event_botonEliminarCondicionActionPerformed

    private void botonAgregarCondicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarCondicionActionPerformed
       int ban=0;
       if (txtNombreCondicion.getText().isEmpty()){
           ban=1;
            JOptionPane.showMessageDialog(this, "El campo Condicion está vacio", "Error", ERROR_MESSAGE);
       }else{
            char []caracteres = txtNombreCondicion.getText().toCharArray();
        for(int i=0; i< caracteres.length; i++){
            if( Character.isDigit(caracteres[i]) == true ){
                ban=1;
                JOptionPane.showMessageDialog(this, "Solo debe ingresar letras en el campo Requisito", "Error", ERROR_MESSAGE);
            }
        }
       }
        
        if (ban==0){
        CondicionPrioritaria cp = new CondicionPrioritaria (txtNombreCondicion.getText());
        
        this.controlador.persistirCondicionPrioritaria(cp); 
        JOptionPane.showMessageDialog(this, "La Condicion prioritaria fue cargada existosamente ", "Aviso", INFORMATION_MESSAGE);
        this.cargarTablas();
        txtNombreCondicion.setEnabled(false);
        botonAgregarCondicion.setEnabled(false);
        txtNombreCondicion.setText("");
        txtIdCondicion.setText("");
        botonBuscarCondicion.setEnabled(true);
        botonNuevoCondicion.setEnabled(true);
        }

    }//GEN-LAST:event_botonAgregarCondicionActionPerformed

    private void botonBuscarCondicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarCondicionActionPerformed
     int ban=0;
        if (txtIdCondicion.getText().isEmpty()){
         ban=1;   
         JOptionPane.showMessageDialog(this, "El campo id Condicion está vacio", "Error", ERROR_MESSAGE);
         
        }else{
            char []caracteres = txtIdCondicion.getText().toCharArray();

            for(int i=0; i< caracteres.length; i++){
                if( Character.isDigit(caracteres[i]) == false ){
                    ban=1;
                    JOptionPane.showMessageDialog(this, "Error, solo puede ingresar numeros en el campo id", "Error", ERROR_MESSAGE);
                }
            }
        }                     
        
        if (ban==0){
       
            int id_Condicion = Integer.parseInt(txtIdCondicion.getText());
            CondicionPrioritaria cp = this.controlador.buscarCondicionPrioritaria(id_Condicion);

            if ( cp == null){
                JOptionPane.showMessageDialog(this, "El id ingresado no corresponde con ninguna Condicion prioritaria registrada ", "Error", ERROR_MESSAGE);

            }else{
                txtNombreCondicion.setText(cp.getMotivo());
                botonModificarCondicion.setEnabled(true);   
                botonEliminarCondicion.setEnabled(true);
            }
        }
        
        botonAgregarCondicion.setEnabled(false);
  
     botonNuevoCondicion.setEnabled(true);
    }//GEN-LAST:event_botonBuscarCondicionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAgregarCondicion;
    private javax.swing.JButton botonAgregarEstado;
    private javax.swing.JButton botonAgregarReq;
    private javax.swing.JButton botonAgregarTipo;
    private javax.swing.JButton botonBuscarCondicion;
    private javax.swing.JButton botonBuscarEstado;
    private javax.swing.JButton botonBuscarReq;
    private javax.swing.JButton botonBuscarTipo;
    private javax.swing.JButton botonEliminarCondicion;
    private javax.swing.JButton botonEliminarEstado;
    private javax.swing.JButton botonEliminarReq;
    private javax.swing.JButton botonEliminarTipo;
    private javax.swing.JButton botonGuardarCondicion;
    private javax.swing.JButton botonGuardarEstado;
    private javax.swing.JButton botonGuardarReq;
    private javax.swing.JButton botonGuardarTipo;
    private javax.swing.JButton botonModificarCondicion;
    private javax.swing.JButton botonModificarEstado;
    private javax.swing.JButton botonModificarReq;
    private javax.swing.JButton botonModificarTipo;
    private javax.swing.JButton botonNuevoCondicion;
    private javax.swing.JButton botonNuevoEstado;
    private javax.swing.JButton botonNuevoReq;
    private javax.swing.JButton botonNuevoTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tablaCondicionesPrioritarias;
    private javax.swing.JTable tablaEstadosTurno;
    private javax.swing.JTable tablaRequisitos;
    private javax.swing.JTable tablaTiposCliente;
    private javax.swing.JTextField txtIdCondicion;
    private javax.swing.JTextField txtIdEstado;
    private javax.swing.JTextField txtIdRequisito;
    private javax.swing.JTextField txtIdTipo;
    private javax.swing.JTextField txtNombreCondicion;
    private javax.swing.JTextField txtNombreEstado;
    private javax.swing.JTextField txtNombreTipo;
    private javax.swing.JTextField txtRequisito;
    // End of variables declaration//GEN-END:variables

 public void cargarTablas(){
     
     // Carga de la tabla de Requisitos
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("id");//0
        modelo.addColumn("Nombre");//1
       
       List<Requisito> requisitos = this.controlador.ListarRequisitos();
        
        modelo.setRowCount(requisitos.size());
        
        for(int i = 0; i < requisitos.size(); i++){
            
            modelo.setValueAt(requisitos.get(i).getId(), i, 0);
            modelo.setValueAt(requisitos.get(i).getNombreRequisito(), i, 1);                                  
        }
        this.tablaRequisitos.setModel(modelo);
        modelo= null;
  // Carga de la tabla de tipos de cliente
        DefaultTableModel modelo2 = new DefaultTableModel();
        modelo2.addColumn("id");//0
        modelo2.addColumn("Nombre");//1
       
       
        List<TipoCliente> tiposClientes = this.controlador.ListarTiposClientes();
        modelo2.setRowCount(tiposClientes.size());
        
        for(int i = 0; i < tiposClientes.size(); i++){
            
            modelo2.setValueAt(tiposClientes.get(i).getIdTipoCliente(), i, 0);
            modelo2.setValueAt(tiposClientes.get(i).getNombre(), i, 1);                                  
        }
        this.tablaTiposCliente.setModel(modelo2);
        modelo2=null;
         // Carga de la tabla de Estados de Turno
        DefaultTableModel modelo3 = new DefaultTableModel();
        modelo3.addColumn("id");//0
        modelo3.addColumn("Nombre");//1
       
       
         List<EstadoTurno> estadosTurnos = this.controlador.ListarEstadosTurnos();
        modelo3.setRowCount(estadosTurnos.size());
        
        for(int i = 0; i < estadosTurnos.size(); i++){
            
            modelo3.setValueAt(estadosTurnos.get(i).getId_Estado(), i, 0);
            modelo3.setValueAt(estadosTurnos.get(i).getNombre(), i, 1);                                  
        }
        this.tablaEstadosTurno.setModel(modelo3);
        modelo3=null;
        
           // Carga de la tabla de Condiciones Prioritarias
        DefaultTableModel modelo4 = new DefaultTableModel();
        modelo4.addColumn("id");//0
        modelo4.addColumn("Nombre");//1
       
       
        List<CondicionPrioritaria> condicionesPrioritarias = this.controlador.ListarCondicionesPrioritarias();
        modelo4.setRowCount(condicionesPrioritarias.size());
        
        for(int i = 0; i < condicionesPrioritarias.size(); i++){
            
            modelo4.setValueAt(condicionesPrioritarias.get(i).getIdCondicion(), i, 0);
            modelo4.setValueAt(condicionesPrioritarias.get(i).getMotivo(), i, 1);                                  
        }
        this.tablaCondicionesPrioritarias.setModel(modelo4);
        modelo4=null;
        
        
        
        
 }
    




}
